/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TableRouteImport } from './routes/table'
import { Route as ScatterRouteImport } from './routes/scatter'
import { Route as MapsRouteImport } from './routes/maps'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PrecinctsMatchRouteImport } from './routes/precincts/match'
import { Route as CountiesCountyTableRouteImport } from './routes/counties/$county/table'
import { Route as CountiesCountyScatterRouteImport } from './routes/counties/$county/scatter'
import { Route as CountiesCountyMapsRouteImport } from './routes/counties/$county/maps'

const TableRoute = TableRouteImport.update({
  id: '/table',
  path: '/table',
  getParentRoute: () => rootRouteImport,
} as any)
const ScatterRoute = ScatterRouteImport.update({
  id: '/scatter',
  path: '/scatter',
  getParentRoute: () => rootRouteImport,
} as any)
const MapsRoute = MapsRouteImport.update({
  id: '/maps',
  path: '/maps',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PrecinctsMatchRoute = PrecinctsMatchRouteImport.update({
  id: '/precincts/match',
  path: '/precincts/match',
  getParentRoute: () => rootRouteImport,
} as any)
const CountiesCountyTableRoute = CountiesCountyTableRouteImport.update({
  id: '/counties/$county/table',
  path: '/counties/$county/table',
  getParentRoute: () => rootRouteImport,
} as any)
const CountiesCountyScatterRoute = CountiesCountyScatterRouteImport.update({
  id: '/counties/$county/scatter',
  path: '/counties/$county/scatter',
  getParentRoute: () => rootRouteImport,
} as any)
const CountiesCountyMapsRoute = CountiesCountyMapsRouteImport.update({
  id: '/counties/$county/maps',
  path: '/counties/$county/maps',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/maps': typeof MapsRoute
  '/scatter': typeof ScatterRoute
  '/table': typeof TableRoute
  '/precincts/match': typeof PrecinctsMatchRoute
  '/counties/$county/maps': typeof CountiesCountyMapsRoute
  '/counties/$county/scatter': typeof CountiesCountyScatterRoute
  '/counties/$county/table': typeof CountiesCountyTableRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/maps': typeof MapsRoute
  '/scatter': typeof ScatterRoute
  '/table': typeof TableRoute
  '/precincts/match': typeof PrecinctsMatchRoute
  '/counties/$county/maps': typeof CountiesCountyMapsRoute
  '/counties/$county/scatter': typeof CountiesCountyScatterRoute
  '/counties/$county/table': typeof CountiesCountyTableRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/maps': typeof MapsRoute
  '/scatter': typeof ScatterRoute
  '/table': typeof TableRoute
  '/precincts/match': typeof PrecinctsMatchRoute
  '/counties/$county/maps': typeof CountiesCountyMapsRoute
  '/counties/$county/scatter': typeof CountiesCountyScatterRoute
  '/counties/$county/table': typeof CountiesCountyTableRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/maps'
    | '/scatter'
    | '/table'
    | '/precincts/match'
    | '/counties/$county/maps'
    | '/counties/$county/scatter'
    | '/counties/$county/table'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/maps'
    | '/scatter'
    | '/table'
    | '/precincts/match'
    | '/counties/$county/maps'
    | '/counties/$county/scatter'
    | '/counties/$county/table'
  id:
    | '__root__'
    | '/'
    | '/maps'
    | '/scatter'
    | '/table'
    | '/precincts/match'
    | '/counties/$county/maps'
    | '/counties/$county/scatter'
    | '/counties/$county/table'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MapsRoute: typeof MapsRoute
  ScatterRoute: typeof ScatterRoute
  TableRoute: typeof TableRoute
  PrecinctsMatchRoute: typeof PrecinctsMatchRoute
  CountiesCountyMapsRoute: typeof CountiesCountyMapsRoute
  CountiesCountyScatterRoute: typeof CountiesCountyScatterRoute
  CountiesCountyTableRoute: typeof CountiesCountyTableRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/table': {
      id: '/table'
      path: '/table'
      fullPath: '/table'
      preLoaderRoute: typeof TableRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/scatter': {
      id: '/scatter'
      path: '/scatter'
      fullPath: '/scatter'
      preLoaderRoute: typeof ScatterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/maps': {
      id: '/maps'
      path: '/maps'
      fullPath: '/maps'
      preLoaderRoute: typeof MapsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/precincts/match': {
      id: '/precincts/match'
      path: '/precincts/match'
      fullPath: '/precincts/match'
      preLoaderRoute: typeof PrecinctsMatchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/counties/$county/table': {
      id: '/counties/$county/table'
      path: '/counties/$county/table'
      fullPath: '/counties/$county/table'
      preLoaderRoute: typeof CountiesCountyTableRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/counties/$county/scatter': {
      id: '/counties/$county/scatter'
      path: '/counties/$county/scatter'
      fullPath: '/counties/$county/scatter'
      preLoaderRoute: typeof CountiesCountyScatterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/counties/$county/maps': {
      id: '/counties/$county/maps'
      path: '/counties/$county/maps'
      fullPath: '/counties/$county/maps'
      preLoaderRoute: typeof CountiesCountyMapsRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MapsRoute: MapsRoute,
  ScatterRoute: ScatterRoute,
  TableRoute: TableRoute,
  PrecinctsMatchRoute: PrecinctsMatchRoute,
  CountiesCountyMapsRoute: CountiesCountyMapsRoute,
  CountiesCountyScatterRoute: CountiesCountyScatterRoute,
  CountiesCountyTableRoute: CountiesCountyTableRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
